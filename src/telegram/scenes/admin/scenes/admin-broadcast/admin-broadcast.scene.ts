import type { User } from '@prisma/__generated__';
import { Role } from '@prisma/__generated__';
import { Action, Ctx, On, Wizard, WizardStep } from 'nestjs-telegraf';
import { Markup } from 'telegraf';
import type { Message } from 'telegraf/typings/core/types/typegram';

import { AdminBroadcastSceneAction } from './constants';
import { AdminBroadcastWizardContext } from './types';

import { Roles } from '@/common/decorators';
import { MainMenuService, MediaService } from '@/common/services';
import { BroadcastService } from '@/modules/broadcast';
import { UserService } from '@/modules/user';
import { AdminScene, BotScene } from '@/telegram/constants';
import { SceneCommand } from '@/telegram/scenes/admin/scenes/add-practice/constants';
import { TEXTS } from '@/telegram/scenes/admin/scenes/add-practice/texts';
import { BaseCallback, BaseWizardScene } from '@/telegram/scenes/base';

@Roles(Role.ADMIN)
@Wizard(AdminScene.Broadcast)
export class AdminBroadcastWizard extends BaseWizardScene<AdminBroadcastWizardContext> {
  constructor(
    private readonly broadcastService: BroadcastService,
    private readonly userService: UserService,
    protected readonly mainMenuService: MainMenuService,
    protected readonly mediaService: MediaService,
  ) {
    super(mainMenuService, mediaService);
  }

  @WizardStep(1)
  async start(@Ctx() ctx: AdminBroadcastWizardContext) {
    await this.sendOrEdit(
      ctx,
      'üì¢ –ú–∞—Å—Å–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π\n\n–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º:',
      [this.goToAdminButton],
      undefined,
      true,
    );

    ctx.wizard.next();
  }

  @WizardStep(2)
  @On('text')
  async onMessageText(@Ctx() ctx: AdminBroadcastWizardContext) {
    const message = ctx.message as Message.TextMessage;
    const { text: messageText, entities } = message;

    if (!messageText || messageText.trim().length === 0) {
      await this.mediaService.sendText(ctx, '‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
      return;
    }

    ctx.wizard.state.message = { text: messageText, entities };

    const confirmButton = Markup.button.callback('‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', AdminBroadcastSceneAction.CONFIRM_SEND);
    const cancelButton = Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', AdminBroadcastSceneAction.CANCEL);

    const keyboard = Markup.inlineKeyboard([confirmButton, cancelButton, this.goToAdminButton], { columns: 1 });

    await this.mediaService.sendText(
      ctx,
      `‚ö†Ô∏è –≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –±–æ—Ç–∞!\n\n–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ?\n\nüìù –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä —Å–æ–æ–±—â–µ–Ω–∏—è:`,
    );

    await this.mediaService.sendText(ctx, messageText, {
      entities: message.entities,
      inlineKeyboard: keyboard,
      protectContent: false,
    });

    ctx.wizard.next();
  }

  @WizardStep(3)
  @Action(AdminBroadcastSceneAction.CONFIRM_SEND)
  async onConfirmSend(@Ctx() ctx: AdminBroadcastWizardContext) {
    const message = ctx.wizard.state.message;

    if (!message?.text) {
      await this.mediaService.sendText(ctx, '‚ùå –û—à–∏–±–∫–∞: —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ.');
      return this.onRestart(ctx);
    }

    try {
      const users: User[] = await this.userService.findAll();

      const telegramIds = users.map((user: User) => Number(user.telegramId));

      if (telegramIds.length === 0) {
        await this.mediaService.sendText(ctx, '‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.');
        return this.backToAdmin(ctx);
      }

      await this.broadcastService.enqueue(telegramIds, { text: message.text, entities: message.entities });

      const successMessage = `‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞!\n\nüìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π: ${telegramIds.length}\n\nüì§ –°–æ–æ–±—â–µ–Ω–∏—è –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.`;

      const restartButton = Markup.button.callback('üîÑ –ù–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞', BaseCallback.Restart);

      await this.sendOrEdit(ctx, successMessage, [restartButton, this.goToAdminButton], undefined, true);
    } catch (error) {
      console.error('Broadcast error:', error);
      await this.mediaService.sendText(ctx, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ä–∞—Å—Å—ã–ª–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
      return this.backToAdmin(ctx);
    }
  }

  @Action(AdminBroadcastSceneAction.CANCEL)
  async onCancel(@Ctx() ctx: AdminBroadcastWizardContext) {
    await this.mediaService.sendText(ctx, '‚ùå –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.');
    return this.onRestart(ctx);
  }

  @Action(AdminBroadcastSceneAction.BACK_TO_ADMIN)
  async onBackToAdmin(@Ctx() ctx: AdminBroadcastWizardContext) {
    return this.backToAdmin(ctx);
  }

  private async backToAdmin(ctx: AdminBroadcastWizardContext) {
    return this.navigateTo(ctx, BotScene.Admin);
  }

  get goToAdminButton() {
    return Markup.button.callback(TEXTS.GO_TO_ADMIN, SceneCommand.GO_TO_ADMIN);
  }
}
